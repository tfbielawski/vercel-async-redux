{"ast":null,"code":"var _jsxFileName = \"/home/trollhero/MEGAsync/Lambda/vercel-async-redux/src/components/Monster.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { getMonster, fetchFail } from \"../actions/actions\";\nimport { connect } from \"react-redux\";\nimport \"./monster.css\"; //MOnster function, pass in magic props\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Monster = props => {\n  _s();\n\n  //destructure props\n  const {\n    monster,\n    specialAbilities,\n    isFetching,\n    error\n  } = props;\n  console.log(\"MONSTER.JS SA >>> \", specialAbilities); //const name = props.name;\n  //Create the useEffect hook that comes in from actions\n\n  useEffect(() => {\n    //Call the getMonster function\n    props.getMonster(); //Empty dependency to prevent endless calls\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" ERROR, HUMAN! Try again, or get eaten!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 25\n    }, this);\n  }\n\n  if (isFetching) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" The Monster is coming; be patient! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 29\n    }, this);\n  } //Click handler to get a monster\n\n\n  const handleClick = () => {\n    props.getMonster();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"topDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" D&D Random Monster Generator \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\" Monster: \", monster.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"subDiv\",\n          children: [\" Alignment: \", monster.alignment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"subDiv\",\n          children: [\" Type: \", monster.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"subDiv\",\n          children: [\" Size: \", monster.size]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"subDiv\",\n          children: \" Special Abilities: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        children: \"Get new monster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          props.fetchFail(\"Pressed the Error button!!!\");\n        },\n        children: \" Error Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}; //Map state to props\n\n\n_s(Monster, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Monster;\n\nconst mapStateToProps = state => {\n  return {\n    monster: state.monster,\n    isFetching: state.isFetching,\n    error: state.error,\n    specialAbilities: state.monster.special_abilities\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getMonster,\n  fetchFail\n})(Monster);\n\nvar _c;\n\n$RefreshReg$(_c, \"Monster\");","map":{"version":3,"sources":["/home/trollhero/MEGAsync/Lambda/vercel-async-redux/src/components/Monster.js"],"names":["React","useEffect","getMonster","fetchFail","connect","Monster","props","monster","specialAbilities","isFetching","error","console","log","handleClick","name","alignment","type","size","mapStateToProps","state","special_abilities"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,oBAAtC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAO,eAAP,C,CAGA;;;;;AACA,MAAMC,OAAO,GAAIC,KAAD,IAChB;AAAA;;AACI;AACA,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,gBAAV;AAA4BC,IAAAA,UAA5B;AAAwCC,IAAAA;AAAxC,MAAiDJ,KAAvD;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCJ,gBAAlC,EAJJ,CAMG;AACC;;AACAP,EAAAA,SAAS,CAAC,MACV;AACI;AACAK,IAAAA,KAAK,CAACJ,UAAN,GAFJ,CAII;AACH,GANQ,EAMP,EANO,CAAT;;AASA,MAAIQ,KAAJ,EAAW;AAAE,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAAwD;;AAErE,MAAID,UAAJ,EAAgB;AAAC,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAAmD,GAnBxE,CAqBI;;;AACA,QAAMI,WAAW,GAAG,MACpB;AACIP,IAAAA,KAAK,CAACJ,UAAN;AACH,GAHD;;AAMA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAG,QAAjB;AAAA,8BACI;AAAA,gCACI;AAAK,UAAA,SAAS,EAAG,QAAjB;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,qCAAeK,OAAO,CAACO,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI;AAAK,UAAA,SAAS,EAAG,QAAjB;AAAA,qCAAuCP,OAAO,CAACQ,SAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAK,UAAA,SAAS,EAAG,QAAjB;AAAA,gCAAkCR,OAAO,CAACS,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAOI;AAAK,UAAA,SAAS,EAAG,QAAjB;AAAA,gCAAkCT,OAAO,CAACU,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAQI;AAAK,UAAA,SAAS,EAAG,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAmBI;AAAQ,QAAA,OAAO,EAAEJ,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBJ,eAoBI;AAAQ,QAAA,OAAO,EAAE,MAAK;AAAEP,UAAAA,KAAK,CAACH,SAAN,CAAgB,6BAAhB;AAAiD,SAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AA2BH,CAxDD,C,CA0DA;;;GA1DME,O;;KAAAA,O;;AA2DN,MAAMa,eAAe,GAAGC,KAAK,IAC7B;AACI,SAAO;AACLZ,IAAAA,OAAO,EAAEY,KAAK,CAACZ,OADV;AAELE,IAAAA,UAAU,EAAEU,KAAK,CAACV,UAFb;AAGLC,IAAAA,KAAK,EAAES,KAAK,CAACT,KAHR;AAILF,IAAAA,gBAAgB,EAAEW,KAAK,CAACZ,OAAN,CAAca;AAJ3B,GAAP;AAMD,CARH;;AAUA,eAAehB,OAAO,CAACc,eAAD,EAAkB;AAAEhB,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAlB,CAAP,CAAoDE,OAApD,CAAf","sourcesContent":["import React, {useEffect} from \"react\";\nimport { getMonster, fetchFail } from \"../actions/actions\";\nimport {connect} from \"react-redux\";\nimport \"./monster.css\"\n\n\n//MOnster function, pass in magic props\nconst Monster = (props) =>\n{\n    //destructure props\n    const {monster, specialAbilities, isFetching, error} = props;\n\n    console.log(\"MONSTER.JS SA >>> \", specialAbilities);\n\n   //const name = props.name;\n    //Create the useEffect hook that comes in from actions\n    useEffect(() => \n    {\n        //Call the getMonster function\n        props.getMonster();\n\n        //Empty dependency to prevent endless calls\n    },[]);\n\n  \n    if (error) { return <p> ERROR, HUMAN! Try again, or get eaten!</p>  }\n\n    if (isFetching) {return <p> The Monster is coming; be patient! </p>}\n\n    //Click handler to get a monster\n    const handleClick = () => \n    {\n        props.getMonster();\n    }\n\n\n    return (\n        <>\n            <div className = \"topDiv\">\n                <div >\n                    <div className = \"header\">\n                        <h1> D&D Random Monster Generator </h1>\n                        <h2> Monster: {monster.name}</h2>\n                    </div>\n                    <div className = \"subDiv\"> Alignment: {monster.alignment}</div>\n                    <div className = \"subDiv\"> Type: {monster.type}</div>\n                    <div className = \"subDiv\"> Size: {monster.size}</div>\n                    <div className = \"subDiv\"> Special Abilities: {}</div>\n                    {/* <div>{monster.special_abilities.name}</div> */}\n{/*                         \n                    {monster.special_abilities.map((item,i) => \n                         <div key={i}> {item.name} in a {item.desc} size.</div>\n                    )}\n                     */}\n                    \n                       \n                </div>\n                <button onClick={handleClick}>Get new monster</button>\n                <button onClick={()=> { props.fetchFail(\"Pressed the Error button!!!\"); }}> Error Button</button>\n            \n            </div>    \n        </>\n    )\n}\n\n//Map state to props\nconst mapStateToProps = state => \n{\n    return {\n      monster: state.monster,\n      isFetching: state.isFetching,\n      error: state.error,\n      specialAbilities: state.monster.special_abilities\n    };\n  };\n\nexport default connect(mapStateToProps, { getMonster, fetchFail })(Monster);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"//Import the actions\nimport { FETCH_START, FETCH_SUCCESS, FETCH_FAIL } from \"../actions/actions\"; //Initial state object\n\nconst initialState = {\n  //Monster object\n  monster: {\n    name: \"\",\n    type: \"\",\n    size: \"\",\n    alignment: \"\",\n    special_abilities: {\n      name: \"\",\n      desc: \"\"\n    }\n  },\n  isFetching: false,\n  error: \"\"\n}; //Reducer function, pass in initialState and action, assign to state\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    //Start the fetch\n    case FETCH_START:\n      return { ...state,\n        isFetching: true,\n        error: ''\n      };\n    //Success case\n\n    case FETCH_SUCCESS:\n      return { ...state,\n        monster: action.payload,\n        isFetching: false\n      };\n    //Fail case\n\n    case FETCH_FAIL:\n      return { ...state,\n        error: action.payload,\n        isFetching: false\n      };\n    //Default case\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/trollhero/MEGAsync/Lambda/vercel-async-redux/app/src/reducers/reducers.js"],"names":["FETCH_START","FETCH_SUCCESS","FETCH_FAIL","initialState","monster","name","type","size","alignment","special_abilities","desc","isFetching","error","reducer","state","action","payload"],"mappings":"AACA;AACA,SAAQA,WAAR,EAAqBC,aAArB,EAAoCC,UAApC,QAAqD,oBAArD,C,CAEA;;AACA,MAAMC,YAAY,GAClB;AACI;AACAC,EAAAA,OAAO,EACP;AACIC,IAAAA,IAAI,EAAE,EADV;AAEIC,IAAAA,IAAI,EAAE,EAFV;AAGIC,IAAAA,IAAI,EAAE,EAHV;AAIIC,IAAAA,SAAS,EAAE,EAJf;AAKIC,IAAAA,iBAAiB,EAAG;AAAEJ,MAAAA,IAAI,EAAE,EAAR;AAAYK,MAAAA,IAAI,EAAE;AAAlB;AALxB,GAHJ;AAWIC,EAAAA,UAAU,EAAE,KAXhB;AAYIC,EAAAA,KAAK,EAAE;AAZX,CADA,C,CAgBA;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KACvB;AACI,UAAQA,MAAM,CAACT,IAAf;AAEI;AACA,SAAKN,WAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELH,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;AAMA;;AACF,SAAKX,aAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELV,QAAAA,OAAO,EAAEW,MAAM,CAACC,OAFX;AAGLL,QAAAA,UAAU,EAAE;AAHP,OAAP;AAOA;;AACF,SAAKT,UAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACC,OAFT;AAGLL,QAAAA,UAAU,EAAE;AAHP,OAAP;AAMA;;AACF;AACE,aAAOG,KAAP;AA7BN;AA+BH,CAjCM","sourcesContent":["\n//Import the actions\nimport {FETCH_START, FETCH_SUCCESS, FETCH_FAIL} from \"../actions/actions\"\n\n//Initial state object\nconst initialState =\n{\n    //Monster object\n    monster: \n    {\n        name: \"\",\n        type: \"\",\n        size: \"\",\n        alignment: \"\",\n        special_abilities:  { name: \"\", desc: \"\", },\n        \n    },\n    isFetching: false,\n    error: \"\"\n}\n\n//Reducer function, pass in initialState and action, assign to state\nexport const reducer = (state = initialState, action) =>\n{\n    switch (action.type) \n    {\n        //Start the fetch\n        case(FETCH_START):\n          return({\n            ...state,\n            isFetching: true,\n            error: ''\n          });\n\n          //Success case\n        case(FETCH_SUCCESS):\n          return({\n            ...state,\n            monster: action.payload,\n            isFetching: false,\n          });\n\n\n          //Fail case\n        case(FETCH_FAIL):\n          return({\n            ...state,\n            error: action.payload,\n            isFetching: false\n          })\n\n          //Default case\n        default:\n          return state;\n      }\n}"]},"metadata":{},"sourceType":"module"}